[build-system]
# Minimum requirements for the build system to execute.
requires = ["scikit-build-core", "Cython", "cython-cmake", "numpy>=2", "setuptools_scm[toml]>=8.1"]  # PEP 508 specifications.
build-backend = "scikit_build_core.build"

[tool.scikit-build]
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/PartSegCore_compiled_backend/version.py"]
cmake.version = ">=3.21"
sdist.exclude = [".github", "tox.ini", "build_utils", "notebooks", ".readthedocs.yaml"]
wheel.exclude = ["**.pyx"]
#cmake.build-type = "Debug"


[project]
name = "PartSegCore_compiled_backend"
description = "PartSegCore compiled backend,"
authors = [
    { name = "Grzegorz Bokota", email = "g.bokota@cent.uw.edu.pl" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
keywords = [
    "bioimaging",
]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.25.0",
]
dynamic = [
    "version",
]

[project.readme]
file = "Readme.md"
content-type = "text/markdown"

[project.license]
text = "BSD-3-Clause"

[project.urls]
Homepage = "https://4dnucleome.cent.uw.edu.pl/PartSeg/"
Documentation = "https://partsegcore-compiled-backend.readthedocs.io/en/stable/"
"Source Code" = "https://github.com/4DNucleome/PartSegCore-compiled-backend"

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
]
docs = [
    "sphinx>=5.0.0",
]

[tool.setuptools]
platforms = [
    "Linux",
    "Windows",
    "MacOs",
]
license-files = [
    "License.txt",
]
include-package-data = false

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.packages.find]
where = [
    "src",
]
namespaces = false

[tool.pytest.ini_options]
testpaths = [
    "src/tests",
]

[tool.coverage.paths]
source = [
    "src",
    "*/site-packages",
]

[tool.coverage.run]
source = [
    "PartSegCore_compiled_backend",
]
omit = [
    ".tox/*",
    "src/**/test*.py",
]
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
]

[tool.setuptools_scm]
write_to = "src/PartSegCore_compiled_backend/version.py"



[tool.check-manifest]
ignore = ["src/PartSegCore_compiled_backend/changelog.py", "src/PartSegCore_compiled_backend/version.py"]


[tool.cibuildwheel]
test-command = "pytest {project}/src/tests"
test-extras = ["test"]
skip = "pp*macos* pp31* pp39-manylinux*"
build = "*64"

[tool.cibuildwheel.macos]
before-all = [
    "set",
    "bash {project}/build_utils/build_libomp.sh",
]


[tool.ruff]
line-length = 120
fix=true

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
docstring-code-format = true
line-ending = "lf"
skip-magic-trailing-comma = false


[tool.ruff.lint]
select = [
    "E", "F", "W", #flake8
    "UP", # pyupgrade
    "I", # isort
    "YTT", #flake8-2020
    "TCH", # flake8-type-checing
    "BLE", # flake8-blind-exception
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "COM", # flake8-commas
    "SIM", # flake8-simplify
    "INP", # flake8-no-pep420
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "TID",  # flake8-tidy-imports # replace absolutify import
    "TRY", # tryceratops
    "ICN", # flake8-import-conventions
    "RUF", # ruff specyfic rules
    "NPY201", # checks compatibility with numpy version 2.0
    "ASYNC", # flake8-async
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "LOG", # flake8-logging
    "SLOT", # flake8-slots
    "PT", # flake8-pytest-style
    "T20", # flake8-print
]
ignore = [
    "E501", # line lenngth is handled by formatter
    "COM812", # flake8-commas - we don't like adding comma on single line of arguments
    "COM819", # conflicts with ruff-format
    "TRY003", # require implement multiple exception class
    "RUF005", # problem with numpy compatybility, see https://github.com/charliermarsh/ruff/issues/2142#issuecomment-1451038741
    "W191", "Q000", "Q001", "Q002", "Q003", "ISC001", # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.per-file-ignores]
"src/tests/**.py" = ["B011", "INP001", "TRY301", "B018", "RUF012"]
"notebooks/**" = ["FA100", "INP001", "A001"]
"docs/conf.py" = ["INP001", "A001"]

[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.codespell]
skip = "notebooks/*"
